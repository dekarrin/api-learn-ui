{
  "swagger": "2.0",
  "info": {
    "description": "This is the specification for the Docstore API, to make it easier to navigate. It is based off of Swagger UI to provide documentation quickly and effectively, and to also allow direct use of the API. While the API itself is hosted on Heroku, the static sections of the documention are hosted here on my personal GitHub via GitHub pages, accessible at dekarrin.com/docstore-ui (or at /api/v1 in the deployed Heroku app, which redirects here).",
    "version": "1.0.0",
    "title": "Docstore Service API"
  },
  "host": "cryptic-crag-50223.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "topic",
      "description": "A description of a file/folder's contents. Allows grouping and filtering."
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
	"/topics/": {
	  "post": {
        "tags": [
          "topic"
        ],
        "summary": "Create new Topic",
        "description": "Creates a new topic.",
        "operationId": "createTopic",
        "produces": [
          "application/json"
        ],
		"parameters": [
		  {
			"name": "body",
			"in": "body",
			"description": "New contents of the topic. Note that the 'id' field is ignored; one will be generated by the service automatically.",
			"required": true,
			"schema": {
				"$ref": "#/definitions/Topic"
			}
		  }
		],
        "responses": {
          "201": {
            "description": "Topic was successfully created.",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "400": {
            "description": "Problem with the request payload"
          }
        }
      },
      "get": {
        "tags": [
          "topic"
        ],
        "summary": "List all topics",
        "description": "Returns a list of all topics and their IDs.",
        "operationId": "getAllTopics",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All topics were successfully retrieved",
            "schema": {
			  "type": "array",
			  "items": {
				"$ref": "#/definitions/Topic"
			  }
            }
          }
        }
      }
	},
    "/topics/{topicId}/": {
      "get": {
        "tags": [
          "topic"
        ],
        "summary": "Find topic by ID",
        "description": "Returns a single topic",
        "operationId": "getTopicByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of topic to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Topic was successfully retrieved and is in the response body",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "404": {
            "description": "Topic not found"
          }
		}
      },
	  "put": {
        "tags": [
          "topic"
        ],
        "summary": "Update an existing topic",
        "description": "Edit the full contents of a topic.",
        "operationId": "editTopic",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of topic to modify",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
		  {
			"name": "body",
			"in": "body",
			"description": "New contents of the topic. Note that the 'id' field is ignored.",
			"required": true,
			"schema": {
				"$ref": "#/definitions/Topic"
			}
		  }
        ],
        "responses": {
          "200": {
            "description": "Topic successfully updated",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "400": {
            "description": "Problem with the request payload"
          },
          "404": {
            "description": "Topic not found"
          }
		}
      },
	  "delete": {
        "tags": [
          "topic"
        ],
        "summary": "Delete an existing topic",
        "description": "Remove a topic from the system.",
        "operationId": "deleteTopic",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of topic to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The topic with the given ID has been successfully deleted, if it existed."
          }
		}
      }
	}
  },
  "definitions": {
    "Topic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "short_desc": {
          "type": "string",
		  "maxLength": 255
        },
        "long_desc": {
          "type": "string"
        }
	  }
	}
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}