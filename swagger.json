{
  "swagger": "2.0",
  "info": {
    "description": "This is the specification for the Docstore API, to make it easier to navigate. It is based off of Swagger UI to provide documentation quickly and effectively, and to also allow direct use of the API. While the API itself is hosted on Heroku, the static sections of the documention are hosted here on my personal GitHub via GitHub pages, accessible at dekarrin.com/docstore-ui (or at /api/v1 in the deployed Heroku app, which redirects here).",
    "version": "1.0.0",
    "title": "Docstore Service API"
  },
  "host": "cryptic-crag-50223.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "topic",
      "description": "A description of a document/folder's contents. Allows grouping and filtering."
    },
    {
        "name": "folder",
        "description": "A unit of logical organization that holds documents and other folders."
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/topics/": {
      "get": {
        "tags": [
          "topic"
        ],
        "summary": "List all topics",
        "description": "Returns a list of all topics and their IDs.",
        "operationId": "getAllTopics",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All topics were successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Topic"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "topic"
        ],
        "summary": "Create new Topic",
        "description": "Creates a new topic.",
        "operationId": "createTopic",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "New contents of the topic. Note that the 'id' field is ignored; one will be generated by the service automatically.",
            "required": true,
            "schema": {
                "$ref": "#/definitions/Topic"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Topic was successfully created.",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "400": {
            "description": "Problem with the request payload"
          }
        }
      }
    },
    "/topics/{topicId}/": {
      "get": {
        "tags": [
          "topic"
        ],
        "summary": "Find topic by ID",
        "description": "Returns a single topic",
        "operationId": "getTopicByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of topic to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Topic was successfully retrieved and is in the response body",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "404": {
            "description": "Topic not found"
          }
        }
      },
      "put": {
        "tags": [
          "topic"
        ],
        "summary": "Update an existing topic",
        "description": "Edit the full contents of a topic.",
        "operationId": "editTopic",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of topic to modify",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New contents of the topic. Note that the 'id' field is ignored.",
            "required": true,
            "schema": {
                "$ref": "#/definitions/Topic"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Topic successfully updated",
            "schema": {
              "$ref": "#/definitions/Topic"
            }
          },
          "400": {
            "description": "Problem with the request payload"
          },
          "404": {
            "description": "Topic not found"
          }
        }
      },
      "delete": {
        "tags": [
          "topic"
        ],
        "summary": "Delete an existing topic",
        "description": "Remove a topic from the system.",
        "operationId": "deleteTopic",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of topic to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The topic with the given ID has been successfully deleted, if it existed."
          }
        }
      }
    },
    "/folders/": {
      "get": {
        "tags": [
          "folder"
        ],
        "summary": "List all folders",
        "description": "Returns a list of all folders and their IDs.",
        "operationId": "getAllFolders",
        "produces": [
          "application/json"
        ],
        "parameters": [
            {
                "name": "topic",
                "in": "query",
                "description": "Filter folders to those that have the given topic",
                "type": "string"
            }
        ],
        "responses": {
          "200": {
            "description": "All folders were successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "folder"
        ],
        "summary": "Create new Folder",
        "description": "Creates a new folder.",
        "operationId": "createFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "New contents of the folder object. Note that the 'id' field is ignored; one will be generated by the service automatically.",
            "required": true,
            "schema": {
                "$ref": "#/definitions/Folder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Folder was successfully created.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Problem with the request payload"
          }
        }
      }
    },
    "/folders/{folderId}/": {
      "get": {
        "tags": [
          "folder"
        ],
        "summary": "Find folder by ID",
        "description": "Returns a single folder",
        "operationId": "getFolderByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "ID of folder to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder was successfully retrieved and is in the response body",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "404": {
            "description": "Folder not found"
          }
        }
      },
      "put": {
        "tags": [
          "folder"
        ],
        "summary": "Update an existing folder",
        "description": "Edit the full contents of a folder.",
        "operationId": "editFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "ID of folder to modify",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New contents of the folder. Note that the 'id' field is ignored.",
            "required": true,
            "schema": {
                "$ref": "#/definitions/Folder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder successfully updated",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Problem with the request payload"
          },
          "404": {
            "description": "Folder not found"
          }
        }
      },
      "delete": {
        "tags": [
          "folder"
        ],
        "summary": "Delete an existing folder and its contents",
        "description": "Remove a folder from the system. This delete is recursive; any folders and documents in the deleted folder will also be deleted.",
        "operationId": "deleteFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "ID of folder to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The folder with the given ID and its contents has been successfully deleted, if they existed."
          }
        }
      }
    },
    "/documents/": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "List all documents",
        "description": "Returns a list of all documents and their IDs.",
        "operationId": "getAllDocuments",
        "produces": [
          "application/json"
        ],
        "parameters": [
            {
                "name": "topic",
                "in": "query",
                "description": "Filter docuemnts to those that have the given topic",
                "type": "string"
            },
            {
                "name": "folder",
                "in": "query",
                "description": "Filter documents to those that are in the folder with the given name",
                "type": "string"
            }
        ],
        "responses": {
          "200": {
            "description": "All documents were successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Document"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Create new Document",
        "description": "Creates a new document.",
        "operationId": "createDocument",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "New contents of the document object. Note that the 'id' field is ignored; one will be generated by the service automatically.",
            "required": true,
            "schema": {
                "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document was successfully created.",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Document with the request payload"
          }
        }
      }
    },
    "/documents/{docId}/": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Find document by ID",
        "description": "Returns a single document",
        "operationId": "getDocumentByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "docId",
            "in": "path",
            "description": "ID of document to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Document was successfully retrieved and is in the response body",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "404": {
            "description": "Document not found"
          }
        }
      },
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Update an existing document",
        "description": "Edit the full contents of a document.",
        "operationId": "editDocument",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "docId",
            "in": "path",
            "description": "ID of document to modify",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New properties for the document. Note that the 'id' field is ignored.",
            "required": true,
            "schema": {
                "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document successfully updated",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Problem with the request payload"
          },
          "404": {
            "description": "Document not found"
          }
        }
      },
      "delete": {
        "tags": [
          "document"
        ],
        "summary": "Delete an existing document and its contents",
        "description": "Remove a document from the system.",
        "operationId": "deleteDocument",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "docId",
            "in": "path",
            "description": "ID of document to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The document with the given ID has been successfully deleted, if it existed."
          }
        }
      }
    }
  },
  "definitions": {
    "Topic": {
      "type": "object",
      "description": "Specifies what a Document or Folder contains information on. Can be used for sorting or filtering.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique ID of the Topic. Automatically generated by the service; any 'id' of a topic included in a request body is ignored."
        },
        "short_desc": {
          "type": "string",
          "maxLength": 255,
          "description": "A short description of the topic, suitable for use in tag clouds or other short-form cases."
        },
        "full_desc": {
          "type": "string",
          "description": "The complete description of the topic."
        }
      }
    },
    "Folder": {
      "type": "object",
      "description": "Holds Documents and other Folders. The root path ('/') is not considered a Folder.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique ID of the Folder. Automatically generated by the service; any 'id' of a Folder included in a request body is ignored."
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "description": "What the folder is called. Does not include parent folders."
        },
        "parent": {
          "type": "string",
          "format": "uuid",
          "description": "The Folder that contains this one. If this is null, this Folder resides at the root ('/') of the document store."
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "description": "A list of UUIDs of the Topics that are associated with this Folder."
        }
      }
    },
	"Document": {
      "type": "object",
      "description": "Holds document contents. Can be in a folder, or loose in the document store (in which case it is considered to be at the root ('/') of the docstore.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique ID of the Document. Automatically generated by the service; any 'id' of a Document included in a request body is ignored."
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "description": "What the document is called. Does not include parent folders if they are in any."
        },
        "folder": {
          "type": "string",
          "format": "uuid",
          "description": "The Folder that this Document is in. If this is null, this Document resides at the root ('/') of the document store."
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "description": "A list of UUIDs of the Topics that are associated with this Document."
        },
        "contents": {
          "type": "string",
          "description": "The contents of this document, stored as plain text."
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}